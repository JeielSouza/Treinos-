========= P R I N C  I P A L =====================
================================================

/*
 * 	O objetivo desse codigo é implementar uma interface na classe principal do controle remoto, para fazer algumas anteracoes; 
 * Nesse codigo em ci, vou usar a boa partica de progamar a maioria das coisas em funcao.
 * */

package Operacional;
import java.util.Locale;
import java.util.Scanner;

public class Principal

{
	
	public static void main(String[] args)
	{
		
		// variaveis
		int opcao;    // dita o fluxo do progama
		int volume;  // aparece na opcao 2 > 3 para que o usuario digite a altura do volume 
		
		// Instanciamentos 
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);
		ControleRemoto c1 = new ControleRemoto();

		// chamando e lendo o menu
		
		c1.menuVisivel();
		opcao = sc.nextInt();
		
			if (opcao == 1)
			{
				c1.abrirMenu();
			}
			
			else if(opcao == 2)
			{
					System.out.println("1 - AUMENTAR VOLUME");
					System.out.println("2 - DIMINUIR VOLUME");
					System.out.println("3 - CONTROLAR VOLUME");
					opcao = sc.nextInt();
						if(opcao == 1)
						{
							c1.maisVolume();
							
						}
						else if(opcao == 2)
						{
							c1.menosVolume();
						}
						
						else if(opcao == 3)
						{
							System.out.println("QUANTO DE VOLUME: ");
							volume = sc.nextInt();
							c1.personVolume(volume);
							
						}
			} 
					
			else if(opcao == 3)
				
			{
				
				System.out.println("1 - MUTAR");
				System.out.println("2 - DESMUTAR");
				opcao = sc.nextInt();
				
					if (opcao == 1)
					{
						c1.ligarMudo();
					}
					
					else if(opcao == 2)
					{
						c1.desligar();
					}
					
			
				
	      }		
			
		  else if(opcao == 4)
		  		{
			  		System.out.println("1 - PAUSER");
			  		System.out.println("2 - PLAYE");
			  		opcao = sc.nextInt();
			  			if (opcao == 1)
			  			{	
			  				c1.pause();
			  				
			  			}
			  			
			  			else if(opcao == 2)
			  			{
			  				c1.play();
			  			}
			  			
			  		
			  
		  		}
		
		 else if(opcao == 5)
				 {
			 
					System.out.println("1 - LIGAR");
					System.out.println("2 - DESLIGAR");
					opcao = sc.nextInt();
							if (opcao == 1)
							{
								c1.ligar();
							}
							else if (opcao == 2)
							{
								c1.desligar();
							}
					 
				 }
			
			
			
			
	c1.abrirMenu();
			
			
			
			
			
			
			
		
	}
}

================================================================

================ C L A S S E: CONTROLE REMOTO ===========
================================================================

package Operacional; 

/*
 * Classe do controle remoto em ci, que sera juntada com a interface > controlador < . 
 * Todo get boleano deve ser nomedo com "is" antes do nome
 * 
 * PROJETO DIVIDIO EM: ATRIBUTOR, CONSTRUTOR, METODOS, INTERFACE
 * Conversamos com essa classe, pelo progama principal atravez da varaivel "opca" = opcaoes
 * Ela dita o fluxo do progama principal, que é basicamente divididos em if e elses.
 * 
 * Atualmente esse esta pronto, mas falta colocar tudo em um While, para que o sistema possa seguir um fluxo continui
 * e achar uma forma de limpar o console, quando voltar ao menuVisivel.
 *
 * */

public class ControleRemoto  implements Controlador
{
	/////// ATRIBUTOS ///////
	
	private int volume; 
	private boolean ligado;
	private boolean tocando;
	
	//// CONSTRUTOR ///
	/*ESSE não tem parametros!*/
	
	public ControleRemoto()
	{
		setVolume(0);
		setLigado(false);
		setTocando(false);
		
	}
	
	
	
	
	
	////////////// METODOS ///////
	
	// -- volume 
	
	private void setVolume(int n)
	{
		this.volume = n; 
	}
	
	private int getVolume()
	{
		return this.volume; 
	}
	
	
	// -- ligado 
	
	private void setLigado(boolean d)
	{
		this.ligado = d; 
	}
	
	
	private boolean isLigado()
	{
		return this.ligado; 
	}
	
	// -- tocando 
	
	private void setTocando(boolean d) 
	{
		this.tocando = d; 
	}
	
	private boolean isTocando()
	{
		return this.tocando;
	}
	
	//////// STATUS BASICO ///////////
	
	/* public void status()
	{
		System.out.println("VOLUME " + getVolume());   
		System.out.println("LIGADO: " + isLigado());    
		System.out.println("TOCANDO: " + isTocando());    
		
	}
     */
	
	public void menuVisivel()
	{
		System.out.println("LG 123 --- I N T E R F A C E");
		System.out.println();
		System.out.println("1 - MENU");
		System.out.println("2 - AUMENTAR / DIMINUIR VOLUME");
		System.out.println("3 - MUTAR / DEMUTAR ");
		System.out.println("4 - PAUSE / PLAY");
		System.out.println("5 - LIGAR / DESLIGAR");
	}

	////// INTERFACE CONTROLADOR ////////
       //=====================================//
	
	// - - Ligar
	
	@Override 
	public void ligar()
	{
		this.setLigado(true);
	}
	
	
	// - - Desligar
	@Override 
	public void desligar()
	{
		this.setLigado(false);
	}
	
	// - - Abrir menu 
	
	@Override 
	public void abrirMenu()
	{
		System.out.println("LIGADO: "+ this.isLigado());
		System.out.println("TOCANDO: "+ this.isTocando());
		System.out.print("VOLUME: " + this.getVolume());
		for (int i = 0; i <= this.getVolume(); i += 10)
		{
			System.out.print("[]");
		}
		
	}
	
	// - - Fechar Menu 
	
	@Override 
	public void fecharMenu()
	{
		
	}
	
	// - - Mais Volume 
	
	@Override
	public void maisVolume()
	{
		
		if(this.isLigado() == true )
		{
			setVolume(this.getVolume() + 1);
			
		}
		else 
		{
			System.out.println("IMPOSSIVEL AUMENTAR VOLUME!");
		}
		
	}
	
	// - - Menos Volume 
	
	@Override 
	public void menosVolume()
	{
		if(this.isLigado() == true)
		{
			setVolume(this.getVolume() - 1);
		}
		else 
		{
			System.out.println("IMPOSSIVEL DIMINUIR VOLUME");
		}
		
	}
	
	
	// - - Volume Personalisado 
	@Override 
	public void personVolume(int v)
	{
		this.setVolume(v);
	}
	
	
	// - - Ligar Mudo 
	
	@Override 
	public void ligarMudo()
	{
		if(this.isLigado() == true && getVolume() > 0) 
		{
			this.setVolume(0);
		}
	}
	
	// - - Desligar Mudo 
	
	@Override 
	public void desligarMudo()
	{
		
		if(this.isLigado() == true && this.getVolume() == 0)
		{
			this.setVolume(10);
		}
		
	}
	
	// - - Play
	
	@Override 
	public void play()
	{
		
		if(this.isLigado() == true && this.isTocando() == false)
		{
			this.setTocando(true);
		}
			
		
	}
	
	// - - Pause
	
	@Override 
	public void pause()
	{
		
		if (this.isLigado() == true && this.isTocando() == true)
		{
			this.setTocando(false);
		}
		
	}
}




========================================================================

================ I N T E R F A C E: CONTROLADOR ===================
================================================================


package Operacional; 

public interface Controlador
{
	public abstract void ligar();
	public abstract void desligar();
	public abstract void abrirMenu();
	public abstract void fecharMenu();
	public abstract void maisVolume();
	public abstract void menosVolume();
	public abstract void personVolume(int v);
	public abstract void ligarMudo();
	public abstract void desligarMudo();
	public abstract void play();
	public abstract void pause();
	
		
}